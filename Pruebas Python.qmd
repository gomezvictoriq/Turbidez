

# Importo la librería pandas para usarla
```{python}
import pandas as pd
```
#Cargo archivo csv
```{python}
df_lab = pd.read_csv(r"D:\GIT\Turbidez\datos\base_de_datos_lab.csv")
df_gis = pd.read_csv(r"D:\GIT\Turbidez\datos\base_de_datos_gis.csv")

#Tuve que poner r delante de la direccion para que me lo lea
#https://www.youtube.com/watch?v=LnH_STJ2GXo  Me ayudó a entender que es un DataFrame
```

# Pruebo que me halla leído bien las 2 bases de datos por separado (se puede omitir)
```{python}
print(df_lab.head())
print(df_gis.head())
```


# Del data Frame gis me quedo con las filas donde pixel=3x3

```{python}
df_gis3x3 = df_gis[(df_gis['pixel'] == '3x3')]
print(df_gis3x3.head())

```
#Combino ambas bases de datos
```{python}
df_combinado = pd.merge(df_lab, df_gis3x3, on=['latitud', 'longitud','fecha'], how='inner')

#'inner': Solo conserva las filas con coincidencias en ambos DataFrames
#Este print se puede omitir, sólo lo uso para verificar
print(df_combinado.head())
```

#Hago un filtrado para quedarme solo con las filas que contenga "turb"

```{python}
df_turbidez = df_combinado[(df_combinado['param'] == 'turb')]


#En la tabla original habia pixeles vales de reflectancia para pixel de 1x1 y 3x3, nos quedamos con los de 3x3.

#Este print se puede omitir, sólo lo uso para verificar, descartar pixel 1x1 y quedarme con pixel 3x3
#Nota: se conserva el índice del df_combinado_


#cuantas filas debería tener al final????? está bueno para saber cuando tiee que haber
print(df_turbidez.head())
```

# Elimino las columnas que no me interesan y cambio el nombre de la columna "valor" por el de "turbidez"

```{python}
df_turbidez_banda = df_turbidez.drop(columns=['longitud','latitud','punto','pixel','fecha','param'])
df_turbidez_banda.rename(columns={'valor': 'turbidez'}, inplace=True)

#df_turbidez_banda.to_csv('Turbidez y reflectancia.csv', index=False)
#Aca lo arreglé, tengo que exportar primero el csv, en index le pongo FALSE
#Si csv está OK
#Este print se puede omitir, sólo lo uso para verificar
print(df_turbidez_banda.head())
```



# Uso la función pivot_table para que en las columnas sean la turbidez y las distintas bandas de Sentinel-2
 ```{python}

df_final = df_turbidez_banda.pivot_table(
    index='turbidez',
    columns='banda',
    values='reflect',  
    )

#df_final = df_final.reset_index()  #Con eso se solucionó 

df_final.to_csv('Turbidez_FINAL.csv', index=True) 

#Con eso se solucionó se deja en True si desactivo df_final = df_final.reset_index()

#o df_final.to_csv('Turbidez_FINAL.csv', index=Faslse) y dejo el reset index
#Cuando usás operaciones como groupby() o pivot_table(), Pandas suele mover una o más columnas al índice del DataFrame. Esto puede ser incómodo si querés trabajar con esas columnas como normales.

#reset_index() convierte el índice en columnas normales, y reemplaza el índice por uno numérico estándar (0, 1, 2...).
 ```

df_final = df.pivot_table(
    index='turbidez',       # ➤ Las filas serán los valores únicos de 'turbidez'
    columns='banda',        # ➤ Las columnas serán los valores únicos de 'banda' (por ejemplo, B01, B02...)
    values='reflect'        # ➤ El contenido de la tabla será lo que haya en la columna 'reflect'
)


Opcional: Resetear índice si no quieres que turbidez sea índice
Si prefieres que turbidez sea una columna más (no índice), puedes hacer:

Entonces la turbidez está en el índice, no como una columna. Por eso, al guardar con index=False, se omite.

# Creo archivo final con los valores de turbidez y reflectancia de cada banda

 

# Prueba de mínimos cuadrados

## Importamos las funciones necesarias para usar este modelo lineal
 ```{python}
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
```

pandas → para leer los datos

train_test_split → para dividir los datos en entrenamiento y validación

LinearRegression → para crear el modelo de regresión lineal

mean_squared_error, r2_score → Para medir el desempeño del modelo (RMSE y R2)

matplotlib.pyplot → para realizar gráficos

## Cargamos los datos de interés y divido en entrenamiento y validación.

```{python}

df = pd.read_csv(r"D:\GIT\Turbidez\Turbidez_FINAL.csv")

X = df[['B04']]  
y = df['turbidez']   #acá tiene que ir turbidez

```

Dividimos los datos en entretrenamiento y validación
```{python}
X_train, X_test, y_train, y_test = train_test_split(
  X, y, test_size=20, shuffle=True  #hace una mezcla 
)
```

# Creo el modelo de regresión 

```{python}
regressor = LinearRegression().fit(X_train, y_train)
```

#Evalúo el modelo generado a partir de las métricas de desempeño.

```{python}
y_pred = regressor.predict(X_test)
p_rmse = mean_squared_error(y_test, y_pred)
p_r2 = r2_score(y_test, y_pred)

print("RMSE", p_rmse) 
print("R2", p_r2)
```


```{python}
fig, ax = plt.subplots(ncols=2, figsize=(10, 5), sharex=True, sharey=True)

#Gráfico de entrenamiento
ax[0].plot(
    X_train,
    regressor.predict(X_train),
    linewidth=3,
    color="#17A77E",
    label="Modelo",
)


ax[0].scatter(X_train, y_train, label="Entrenamiento", color = "#9D50A6", alpha = .6)
ax[0].set(xlabel="Característica", ylabel="Objetivo", title="Conjunto de entrenamiento")
ax[0].legend()

#Gráfico de validación
ax[1].plot(X_test, y_pred, linewidth=3, color="#17A77E", label="Modelo")
ax[1].scatter(X_test, y_test, label="Validación", color = "#9D50A6", alpha = .6)
ax[1].set(xlabel="Característica", ylabel="Objetivo", title="Conjunto de validación")
ax[1].legend()

fig.suptitle("Regresión lineal")

plt.show()
```



